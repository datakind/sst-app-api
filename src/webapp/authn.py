"""
Functions related to authentication.
"""

from datetime import timedelta, datetime, timezone
import jwt
from fastapi import Security, HTTPException, status
from fastapi.security import (
    OAuth2PasswordBearer,
    APIKeyHeader,
)
from passlib.context import CryptContext
from pydantic import BaseModel
from .config import env_vars


pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

oauth2_apikey_scheme = OAuth2PasswordBearer(
    scheme_name="api_key_scheme",
    tokenUrl="token-from-api-key",
)

api_key_header = APIKeyHeader(name="X-API-KEY", scheme_name="api-key", auto_error=False)
# The INST value may be empty for Datakinder or cross-institution access.
api_key_inst_header = APIKeyHeader(
    name="INST", scheme_name="api-inst", auto_error=False
)
# The following is for use by the frontend enduser only.
api_key_enduser_header = APIKeyHeader(
    name="ENDUSER", scheme_name="api-enduser", auto_error=False
)


class Token(BaseModel):
    """Info stored in the JWT."""

    access_token: str
    token_type: str


def get_api_key(
    api_key: str = Security(api_key_header),
    api_key_inst: str = Security(api_key_inst_header),
    api_key_enduser: str = Security(api_key_enduser_header),
) -> tuple[str, str, str]:
    """Retrieve the api key and enduser header key if present."""
    if api_key:
        return (api_key, api_key_inst, api_key_enduser)
    raise HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Invalid or missing API Key",
    )


def check_creds(username: str, password: str) -> bool:
    return username == env_vars["USERNAME"] and password == env_vars["PASSWORD"]


def verify_password(plain_password: str, hashed_password: str) -> bool:
    """Verify a plain password against a hash. Includes a 2y/2b replacement since Laravel
    Generates hashes that start with 2y. The hashing scheme recognizes both."""
    revert_hash = hashed_password.replace("$2y", "$2b", 1)
    return pwd_context.verify(plain_password, revert_hash)


def verify_api_key(plain_api_key: str, hashed_key: str) -> bool:
    """Verify a plain API Key against a hash."""
    return pwd_context.verify(plain_api_key, hashed_key)


def get_api_key_hash(api_key: str):
    """Hash a given api key."""
    return pwd_context.hash(api_key)


def get_password_hash(password: str):
    """Hash a password. To align with the password hashing used by Laravel, we have to replace the 2b
    generated by pwd_context with 2y and that should be the version we store.
    They should be functionally the same: https://stackoverflow.com/a/36225192/28478909
    """
    initial_hash = pwd_context.hash(password)
    return initial_hash.replace("$2b", "$2y", 1)


def create_access_token(data: dict, expires_delta: timedelta | None = None):
    """Create a JWT."""
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.now(timezone.utc) + expires_delta
    else:
        expire = datetime.now(timezone.utc) + timedelta(
            minutes=env_vars["ACCESS_TOKEN_EXPIRE_MINUTES"]
        )
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(
        to_encode, env_vars["SECRET_KEY"], algorithm=env_vars["ALGORITHM"]
    )
    return encoded_jwt
